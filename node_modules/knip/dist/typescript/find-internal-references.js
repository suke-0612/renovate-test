import ts from 'typescript';
import { isIdChar } from '../util/regex.js';
export const isType = (item) => item.type === 'type' || item.type === 'interface' || item.type === 'enum';
export const findInternalReferences = (item, sourceFile, typeChecker, referencedSymbolsInExportedTypes) => {
    if (!item.symbol)
        return [0, false];
    if (item.identifier === '')
        return [1, false];
    if (item.symbol.flags & ts.SymbolFlags.AliasExcludes)
        return [1, false];
    const text = sourceFile.text;
    const id = item.identifier;
    const symbols = new Set();
    let refCount = 0;
    let isSymbolInExportedType = false;
    let index = 0;
    while (index < text.length && (index = text.indexOf(id, index)) !== -1) {
        if (!isIdChar(text.charAt(index - 1)) && !isIdChar(text.charAt(index + id.length))) {
            const isExportDeclaration = index === item.pos || index === item.pos + 1;
            if (!isExportDeclaration) {
                const symbol = typeChecker.getSymbolAtLocation(ts.getTokenAtPosition(sourceFile, index));
                if (symbol) {
                    const isInExportedType = referencedSymbolsInExportedTypes.has(symbol);
                    if (isInExportedType)
                        isSymbolInExportedType = true;
                    if (item.symbol === symbol) {
                        refCount++;
                        if (isInExportedType || isType(item))
                            return [refCount, isSymbolInExportedType];
                    }
                    const declaration = symbol.declarations?.[0];
                    if (declaration) {
                        if (item.symbol === declaration.name?.flowNode?.node?.symbol) {
                            return [++refCount, isSymbolInExportedType];
                        }
                        if (ts.isImportSpecifier(declaration) && symbols.has(symbol)) {
                            return [++refCount, isSymbolInExportedType];
                        }
                    }
                    symbols.add(symbol);
                }
            }
        }
        index += id.length;
    }
    return [refCount, isSymbolInExportedType];
};
