export { _getDependenciesFromScripts as getDependenciesFromScripts } from '../binaries/index.js';
export { _loadJSON as loadJSON } from './fs.js';
export { _load as load } from './loader.js';
export { _resolveSync as resolve } from './resolve.js';
import type { RawPluginConfiguration } from '../types/config.js';
import type { Plugin, PluginOptions } from '../types/plugins.js';
export declare const toCamelCase: (name: string) => string;
export declare const hasDependency: (dependencies: Set<string>, values: (string | RegExp)[]) => boolean;
export declare const normalizePluginConfig: (pluginConfig: RawPluginConfiguration) => boolean | {
    config: string[] | null;
    entry: string[] | null;
    project: string[] | null;
};
export declare const loadConfigForPlugin: (configFilePath: string, plugin: Plugin, options: PluginOptions, pluginName: string) => Promise<any>;
export declare const getFinalEntryPaths: (plugin: Plugin, options: PluginOptions, configEntryPaths: string[]) => string[];
export declare const toCosmiconfig: (moduleName: string, options?: {
    rcPrefix?: string;
    rcSuffix?: string;
    configDir?: boolean;
    configFiles?: boolean;
    configFilesAllExtensions?: boolean;
    additionalExtensions?: string[];
}) => string[];
export declare const toLilconfig: (moduleName: string, options?: {
    rcPrefix?: string;
    rcSuffix?: string;
    configDir?: boolean;
    configFiles?: boolean;
    configFilesAllExtensions?: boolean;
    additionalExtensions?: string[];
}) => string[];
export declare const toUnconfig: (moduleName: string, options?: {
    rcPrefix?: string;
    rcSuffix?: string;
    configDir?: boolean;
    configFiles?: boolean;
    configFilesAllExtensions?: boolean;
    additionalExtensions?: string[];
}) => string[];
export declare const resolveEntry: (options: PluginOptions, specifier: string, rootDir?: string) => string;
